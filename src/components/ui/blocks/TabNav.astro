---
// Extraer propiedades de Astro.props
const { aria, dataTab, id, heading, content, first } = Astro.props;

// Define la interfaz TypeScript para propiedades
interface Props {
  dataTab: string;
  id: string;
  aria: string;
  heading?: string;
  content?: string;
  first?: boolean;
}
// Define button classes
const BUTTON_CLASS =
  "dark:hover:bg-neutral-700 rounded-xl p-4 text-start outline-hidden ring-zinc-500 transition duration-300 hover:bg-neutral-200 focus-visible:ring-3 hs-tab-active:bg-neutral-50 hs-tab-active:shadow-md hs-tab-active:hover:border-transparent dark:ring-zinc-200 dark:focus:outline-hidden  dark:hs-tab-active:bg-neutral-700/60 md:p-5";

/*
first: This property should be set to true for the initial TabNav component in your list
to ensure that it's visible when the page first loads. All subsequent TabNav components
should omit this property or set it to false.*/
---

<!-- Tab button with dynamic class based on 'first' property, id, tab data, and aria-controls  -->
<button
  type="button"
  class={`${first ? "active " : ""}${BUTTON_CLASS}`}
  id={id}
  data-hs-tab={dataTab}
  aria-controls={aria}
  role="tab"
>
  <!-- Slot para contenido adicional -->
  <span class="flex">
    <slot />
    <!-- Contenedor para el encabezado y contenido de la pestaña. -->
    <span class="ms-6 grow">
      <!-- Encabezado de la pestaña, cambia de color cuando está activo -->
      <span
        class="block text-lg font-bold text-neutral-800 hs-tab-active:text-[#0036B3] dark:text-neutral-200 dark:hs-tab-active:text-[#0042FF]"
        >{heading}</span
      >
      <!-- Contenido de la pestaña, cambia de color cuando está activo. -->
      <span
        class="mt-1 block text-neutral-500 hs-tab-active:text-neutral-600 dark:text-neutral-400 dark:hs-tab-active:text-neutral-200"
        >{content}</span
      >
    </span>
  </span>
</button>
